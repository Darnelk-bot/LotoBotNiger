import threading
from flask import Flask, request
import os
import sys
import subprocess
import importlib
import csv
import random
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)

# V√©rifier et installer les d√©pendances manquantes
required_modules = ['numpy', 'scikit-learn', 'joblib']
subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip", "setuptools", "wheel"])

def install_missing_modules():
    for module in required_modules:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {module} est d√©j√† install√©")
        except ImportError:
            print(f"‚ö†Ô∏è Installation de {module}...")
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", module])
                print(f"‚úÖ {module} install√© avec succ√®s")
            except Exception as e:
                print(f"‚ùå √âchec de l'installation de {module}: {str(e)}")

install_missing_modules()

# Maintenant que les d√©pendances sont install√©es, importer les modules
import numpy as np
import joblib
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split

# ======================
# CONFIGURATION NIG√âRIENNE
# ======================
MAX_NUM = 90  # Format du loto nig√©rien
NOMBRE_TIRAGE = 5  # Nombre de num√©ros √† pr√©dire

# Chemins absolus pour tous les fichiers
CSV_FILE = os.path.join(os.getcwd(), 'loto_niger.csv')
MODEL_FILE = os.path.join(os.getcwd(), 'loto_model_niger.pkl')
HISTORY_FILE = os.path.join(os.getcwd(), 'prediction_history.csv')
PREMIUM_FILE = os.path.join(os.getcwd(), 'premium_users.csv')
REJECTED_BALLS_FILE = os.path.join(os.getcwd(), 'boules_rejetees.csv')
ACTIVITY_LOG = os.path.join(os.getcwd(), 'activity_log.csv')
PENDING_PAYMENTS = os.path.join(os.getcwd(), 'pending_payments.csv')

# Plans premium en FCFA
PREMIUM_PLANS = {
    '1m': {'price': 1000, 'days': 30, 'label': "üíé 1 Mois - 1000 FCFA"},
    '3m': {'price': 2500, 'days': 90, 'label': "üíé 3 Mois - 2500 FCFA"},
    '1a': {'price': 9000, 'days': 365, 'label': "üíé 1 An - 9000 FCFA"}
}

# P√©riode d'essai gratuit (7 jours)
FREE_TRIAL_DAYS = 7

# ======================
# FONCTIONS DE BASE
# ======================
def lire_donnees():
    """Charge les donn√©es historiques du loto nig√©rien avec dates"""
    tirages = []
    print(f"üìñ Lecture des donn√©es depuis: {CSV_FILE}")
    
    if not os.path.exists(CSV_FILE):
        print("‚ö†Ô∏è Fichier de donn√©es non trouv√©")
        return []
    
    with open(CSV_FILE, encoding='utf-8-sig') as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        next(reader, None)  # Ignorer l'en-t√™te si pr√©sent
        
        for row in reader:
            if not row or len(row) < NOMBRE_TIRAGE + 1:  # Doit avoir date + num√©ros
                continue
                
            try:
                # La premi√®re colonne est la date
                date_str = row[0].strip()
                
                # Nettoyer et valider les num√©ros DANS L'ORDRE ORIGINAL
                numeros = []
                for cell in row[1:1+NOMBRE_TIRAGE]:
                    if cell.strip().isdigit():
                        num = int(cell.strip())
                        if 1 <= num <= MAX_NUM:
                            numeros.append(num)
                
                if len(numeros) == NOMBRE_TIRAGE:
                    # Stocker [date, num1, num2, ...] dans l'ordre original
                    tirages.append([date_str] + numeros)
            except ValueError:
                continue
    
    # Trier les tirages par date (plus ancien en premier)
    try:
        tirages.sort(key=lambda x: datetime.strptime(x[0], "%d/%m/%Y"))
    except:
        # Si erreur de format de date, garder l'ordre d'origine
        pass
    
    return tirages

def get_derniere_mise_a_jour():
    """R√©cup√®re la date du dernier tirage dans les donn√©es"""
    tirages = lire_donnees()
    if tirages:
        # Trier par date pour obtenir la plus r√©cente
        try:
            derniers = sorted(
                tirages, 
                key=lambda x: datetime.strptime(x[0], "%d/%m/%Y"), 
                reverse=True
            )
            return derniers[0][0]  # Date du tirage le plus r√©cent
        except:
            return "Inconnue"
    return "Inconnue"

def tirage_to_vecteur(tirage):
    """Convertit un tirage en vecteur binaire (sans la date)"""
    vect = np.zeros(MAX_NUM)
    # tirage est [date, num1, num2, ...] - on prend les num√©ros seulement
    for num in tirage[1:]:
        if 1 <= num <= MAX_NUM:
            vect[num - 1] = 1
    return vect

# ======================
# GESTION DES BOULES REJET√âES
# ======================
def charger_boules_rejetees():
    """Charge les boules rejet√©es du fichier manuel"""
    boules_rejetees = []
    print(f"üìñ Lecture des boules rejet√©es depuis: {REJECTED_BALLS_FILE}")
    
    if not os.path.exists(REJECTED_BALLS_FILE):
        print("‚ö†Ô∏è Fichier des boules rejet√©es non trouv√©")
        return boules_rejetees
    
    with open(REJECTED_BALLS_FILE, 'r') as f:
        reader = csv.reader(f)
        next(reader, None)  # Ignorer l'en-t√™te si pr√©sent
        
        for row in reader:
            if not row or len(row) < 3:
                continue
                
            try:
                # La colonne des boules rejet√©es est la troisi√®me
                nums_str = row[2].split(',')
                boules = [int(num.strip()) for num in nums_str if num.strip().isdigit()]
                boules_rejetees.extend(boules)
            except ValueError:
                continue
    
    # √âliminer les doublons et filtrer les num√©ros valides
    return list(set([num for num in boules_rejetees if 1 <= num <= MAX_NUM]))

# ======================
# MOD√àLE IA
# ======================
def entrainer_model():
    """Entra√Æne le mod√®le sur les donn√©es nig√©riennes"""
    print("üîÑ Entra√Ænement du mod√®le sp√©cifique Niger...")
    tirages = lire_donnees()
    
    # V√©rifier si on a assez de donn√©es
    if len(tirages) < 10:
        print("‚ùå Pas assez de donn√©es pour l'entra√Ænement (min. 10 tirages requis)")
        return None
        
    X, y = [], []

    # Cr√©ation des s√©quences temporelles (utilise seulement les num√©ros)
    for i in range(len(tirages) - 3):
        sequence = []
        for j in range(3):
            # Utiliser seulement les num√©ros (sans date)
            sequence.extend(tirage_to_vecteur(tirages[i+j]))
        X.append(sequence)
        y.append(tirage_to_vecteur(tirages[i+3]))
    
    # V√©rifier si on a assez de s√©quences
    if len(X) < 2:
        print("‚ùå Pas assez de s√©quences pour l'entra√Ænement")
        return None
    
    # Entra√Ænement avec validation
    test_size = min(0.2, len(X) - 1)  # Garantir au moins 1 √©chantillon d'entra√Ænement
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=test_size, random_state=42
    )

    model = MLPClassifier(
        hidden_layer_sizes=(128, 64, 32),
        activation='relu',
        solver='adam',
        max_iter=2000,
        early_stopping=True,
        n_iter_no_change=30,
        random_state=42
    )
    
    try:
        model.fit(X_train, y_train)
        print("‚úÖ Mod√®le entra√Æn√© avec succ√®s")
        return model
    except Exception as e:
        print(f"‚ùå Erreur lors de l'entra√Ænement: {e}")
        return None

def predire_tirage(model, historique):
    """G√©n√®re une pr√©diction bas√©e sur l'historique r√©cent et les boules rejet√©es"""
    # Si le mod√®le n'est pas disponible, utiliser une pr√©diction al√©atoire
    if model is None:
        prediction = random.sample(range(1, MAX_NUM + 1), NOMBRE_TIRAGE)
        return sorted(prediction)
    
    # V√©rifier l'historique
    if len(historique) < 3:
        prediction = random.sample(range(1, MAX_NUM + 1), NOMBRE_TIRAGE)
        return sorted(prediction)
    
    try:
        # Cr√©er le vecteur d'historique (utilise seulement les num√©ros)
        vect_historique = np.concatenate([
            tirage_to_vecteur(t) for t in historique[-3:]
        ]).reshape(1, -1)
        
        proba = model.predict_proba(vect_historique)[0]
    except:
        # En cas d'erreur, utiliser une pr√©diction al√©atoire
        prediction = random.sample(range(1, MAX_NUM + 1), NOMBRE_TIRAGE)
        return sorted(prediction)
    
    # Charger les boules rejet√©es manuellement
    boules_rejetees = charger_boules_rejetees()
    
    # Augmenter significativement la probabilit√© des boules rejet√©es
    for num in boules_rejetees:
        if 1 <= num <= MAX_NUM:
            idx = num - 1
            proba[idx] *= 2.5  # Multiplier par 2.5 la probabilit√©
    
    # Classer les num√©ros par probabilit√©
    numeros_tries = sorted(
        range(1, MAX_NUM + 1),
        key=lambda i: proba[i-1],
        reverse=True
    )
    
    # Exclusion des num√©ros r√©cents
    derniers_numeros = set()
    for t in historique[-5:]:
        # t est [date, num1, num2, ...] - on prend les num√©ros seulement
        derniers_numeros.update(t[1:])
    
    prediction = []
    for num in numeros_tries:
        if num not in derniers_numeros:
            prediction.append(num)
            if len(prediction) == NOMBRE_TIRAGE:
                break
    
    # Si on n'a pas assez de num√©ros, compl√©ter avec les plus probables
    if len(prediction) < NOMBRE_TIRAGE:
        prediction.extend(numeros_tries[:NOMBRE_TIRAGE - len(prediction)])
    
    return sorted(prediction)

# ======================
# GESTION UTILISATEURS (AVEC ESSAI GRATUIT)
# ======================
def charger_premium_users():
    """Charge les utilisateurs premium depuis le fichier"""
    premium_users = {}
    print(f"üìñ Lecture des utilisateurs premium depuis: {PREMIUM_FILE}")
    
    if not os.path.exists(PREMIUM_FILE):
        print("‚ö†Ô∏è Fichier premium non trouv√©")
        return premium_users
    
    with open(PREMIUM_FILE, 'r') as f:
        reader = csv.reader(f)
        next(reader, None)  # Ignorer l'en-t√™te
        for row in reader:
            if row and len(row) >= 2:
                try:
                    user_id, expiry = row
                    premium_users[int(user_id)] = datetime.fromisoformat(expiry)
                except (ValueError, IndexError):
                    continue
    return premium_users

def sauvegarder_premium_user(user_id, duration_days):
    """Ajoute un utilisateur premium"""
    expiry = datetime.now() + timedelta(days=duration_days)
    premium_users = charger_premium_users()
    premium_users[user_id] = expiry
    
    with open(PREMIUM_FILE, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['user_id', 'expiry_date'])
        for uid, exp in premium_users.items():
            writer.writerow([uid, exp.isoformat()])
    
    return expiry

def activer_essai_gratuit(user_id):
    """Active un essai gratuit de 7 jours"""
    return sauvegarder_premium_user(user_id, FREE_TRIAL_DAYS)

def verifier_premium(user_id):
    """V√©rifie si un utilisateur est premium"""
    premium_users = charger_premium_users()
    expiry = premium_users.get(user_id)
    return expiry and expiry > datetime.now()

def a_deja_utilise_essai(user_id):
    """V√©rifie si l'utilisateur a d√©j√† utilis√© son essai gratuit"""
    premium_users = charger_premium_users()
    expiry = premium_users.get(user_id)
    # Si l'utilisateur a une expiration mais qu'elle est pass√©e, il a d√©j√† utilis√© son essai
    return expiry is not None

# ======================
# JOURNALISATION
# ======================
def logger_prediction(user_id, prediction):
    """Enregistre les pr√©dictions pour analyse"""
    try:
        print(f"üìù Journalisation de la pr√©diction dans: {HISTORY_FILE}")
        header = not os.path.exists(HISTORY_FILE)
        with open(HISTORY_FILE, 'a', newline='') as f:
            writer = csv.writer(f)
            if header:
                writer.writerow(['timestamp', 'user_id', 'prediction'])
            writer.writerow([
                datetime.now().isoformat(),
                user_id,
                ','.join(map(str, prediction))
            ])
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur journalisation: {str(e)}")

def logger_activite(action, user_id):
    """Journalise les activit√©s importantes"""
    try:
        print(f"üìù Journalisation d'activit√©: {action}")
        with open(ACTIVITY_LOG, 'a', newline='') as f:
            writer = csv.writer(f)
            writer.writerow([
                datetime.now().isoformat(),
                user_id,
                action
            ])
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur journalisation activit√©: {str(e)}")

# ======================
# FONCTIONS TELEGRAM
# ======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande de d√©marrage avec menu adapt√©"""
    user = update.effective_user
    logger_activite("start", user.id)
    
    # Cr√©er le menu
    keyboard = [
        [InlineKeyboardButton("üîÆ Pr√©diction", callback_data='predict')],
        [InlineKeyboardButton("üìä Stats Niger", callback_data='stats')],
        [InlineKeyboardButton("üèÜ T√©moignages", callback_data='temoignages')],
        [InlineKeyboardButton("üö´ Boules rejet√©es", callback_data='rejected')],
        [InlineKeyboardButton("‚ùì Aide", callback_data='help')]
    ]
    
    # Ajouter l'option d'essai gratuit si l'utilisateur n'est pas premium et n'a pas encore utilis√© son essai
    if not verifier_premium(user.id) and not a_deja_utilise_essai(user.id):
        keyboard.insert(0, [InlineKeyboardButton("üÜì Essai 7 jours gratuit", callback_data='free_trial')])
    else:
        keyboard.insert(0, [InlineKeyboardButton("üíé Devenir Premium", callback_data='premium')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        "üåü *LotoBot Niger - Votre proph√®te des num√©ros gagnants!*\n\n"
        "Bienvenue! Je suis une IA sp√©cialement entra√Æn√©e sur les tirages du loto nig√©rien.\n\n"
        "Utilisez les boutons ci-dessous pour commencer :"
    )
    
    await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re les interactions avec les boutons"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == 'predict':
        await send_prediction(query, context)
    elif query.data == 'stats':
        await send_stats(query, context)
    elif query.data == 'temoignages':
        await send_temoignages(query, context)
    elif query.data == 'premium':
        await send_premium_offers(query, context)
    elif query.data == 'help':
        await send_help(query, context)
    elif query.data == 'rejected':
        await afficher_boules_rejetees(query, context)
    elif query.data == 'free_trial':  # Nouvelle option pour l'essai gratuit
        await activer_essai_gratuit_handler(query, context)
    elif query.data.startswith('premium_'):
        await handle_premium_payment(query, context)

async def activer_essai_gratuit_handler(query, context: ContextTypes.DEFAULT_TYPE):
    """Active l'essai gratuit de 7 jours"""
    user_id = query.from_user.id
    
    # V√©rifier si l'utilisateur a d√©j√† utilis√© son essai
    if a_deja_utilise_essai(user_id):
        await query.answer("‚ö†Ô∏è Vous avez d√©j√† utilis√© votre essai gratuit.", show_alert=True)
        return
    
    # Activer l'essai
    expiry = activer_essai_gratuit(user_id)
    expiry_str = expiry.strftime("%d/%m/%Y √† %H:%M")
    
    # Mettre √† jour le message
    await query.edit_message_text(
        text=f"üéâ *Essai Premium activ√©!*\n\n"
             f"Vous avez maintenant acc√®s √† toutes les fonctionnalit√©s premium jusqu'au {expiry_str}.\n\n"
             f"Profitez de votre essai gratuit de 7 jours!",
        parse_mode='Markdown'
    )
    
    # Journaliser l'activation
    logger_activite("free_trial_activated", user_id)

async def send_prediction(query_or_update, context: ContextTypes.DEFAULT_TYPE):
    """Envoie une pr√©diction personnalis√©e"""
    try:
        # R√©cup√©ration de l'utilisateur
        if isinstance(query_or_update, Update):
            user = query_or_update.effective_user
            chat_id = query_or_update.message.chat_id
            reply = query_or_update.message.reply_text
        else:
            user = query_or_update.from_user
            chat_id = query_or_update.message.chat_id
            reply = query_or_update.edit_message_text
        
        # V√©rification premium ou essai
        is_premium = verifier_premium(user.id)
        free_uses = compter_utilisations_gratuites(user.id)
        
        if not is_premium:
            # Limite d'utilisation gratuite
            if free_uses >= 3:
                await envoyer_offre_premium(chat_id, user.id, context)
                return
        
        # G√©n√©ration de la pr√©diction
        try:
            tirages = lire_donnees()
            prediction = predire_tirage(models, tirages[-5:])
            
            # Visualisation graphique
            visual = ["‚óã"] * MAX_NUM
            for num in prediction:
                if 1 <= num <= MAX_NUM:
                    visual[num-1] = "‚óè"
            
            # Cr√©er la grille visuelle
            grid_lines = []
            for i in range(0, MAX_NUM, 10):
                grid_lines.append(" ".join(visual[i:i+10]))
            grid = "\n".join(grid_lines)
            
            # Message avec cr√©dibilit√©
            derniers_tirages = tirages[-1][1:] if tirages and len(tirages) > 0 else []
            succes = len(set(prediction) & set(derniers_tirages)) if tirages and len(tirages) > 0 else 0
            precision = f"\n\nüìà Pr√©cision r√©cente: {succes}/5 num√©ros corrects" if tirages else ""
            
            # Ajouter une note si le mod√®le n'est pas disponible
            model_note = "\n\n‚ö†Ô∏è _Note: Pr√©diction al√©atoire (mod√®le non disponible)_" if models is None else ""
            
            message = (
                f"üéØ *Votre pr√©diction personnalis√©e:*\n"
                f"`{prediction}`{model_note}{precision}\n\n"
                f"üìä Repr√©sentation visuelle :\n"
                f"```\n{grid}\n```\n"
                "‚óè = Num√©ro pr√©dit | ‚óã = Autres num√©ros\n\n"
            )
            
            # Ajouter l'info sur les boules rejet√©es
            boules_rejetees = charger_boules_rejetees()
            if boules_rejetees:
                message += f"üö´ Boules rejet√©es boost√©es: {sorted(boules_rejetees)}\n\n"
            
            if not is_premium:
                message += f"üÜì Utilisations gratuites restantes: {3 - free_uses - 1}/3\n"
                # Proposer l'essai gratuit si pas encore utilis√©
                if not a_deja_utilise_essai(user.id):
                    message += "Activez votre essai gratuit de 7 jours! /start"
                else:
                    message += "Passez premium pour des pr√©dictions illimit√©es! /premium"
            else:
                # Afficher la date d'expiration pour les utilisateurs en essai
                premium_users = charger_premium_users()
                expiry = premium_users.get(user.id)
                if expiry and (expiry - datetime.now()).days <= FREE_TRIAL_DAYS:
                    message += f"‚è≥ Votre essai gratuit expire le {expiry.strftime('%d/%m/%Y')}\n"
            
            # Envoi du message
            await reply(message, parse_mode='Markdown')
            
            # Journalisation
            logger_prediction(user.id, prediction)
            logger_activite("prediction", user.id)
            
        except Exception as e:
            await reply(f"‚ùå Erreur lors de la g√©n√©ration de la pr√©diction: {str(e)}")
        
    except Exception as e:
        error_msg = f"‚ùå Erreur syst√®me: {str(e)}"
        if isinstance(query_or_update, Update):
            await query_or_update.message.reply_text(error_msg)
        else:
            await query_or_update.edit_message_text(error_msg)

async def send_stats(query_or_update, context: ContextTypes.DEFAULT_TYPE):
    """Affiche les statistiques locales avec le total et la derni√®re mise √† jour"""
    try:
        if isinstance(query_or_update, Update):
            reply = query_or_update.message.reply_text
        else:
            reply = query_or_update.edit_message_text
        
        try:
            tirages = lire_donnees()
            total_tirages = len(tirages)
            derniere_maj = get_derniere_mise_a_jour()
            
            if not tirages:
                await reply("üìä Aucune donn√©e statistique disponible pour le moment")
                return
            
            # Statistiques locales (tous les num√©ros de tous les tirages)
            all_nums = []
            for t in tirages:
                all_nums.extend(t[1:])  # Ignorer la date
            
            freq = {i: all_nums.count(i) for i in range(1, MAX_NUM+1)}
            top_5 = sorted(freq.items(), key=lambda x: x[1], reverse=True)[:5]
            
            # Derniers r√©sultats - tri√©s du plus r√©cent au plus ancien
            derniers_tri = sorted(
                tirages, 
                key=lambda x: datetime.strptime(x[0], "%d/%m/%Y"), 
                reverse=True
            )[:3]
            
            # Formater les derniers tirages (conserver l'ordre original)
            derniers = "\n".join([f"‚Ä¢ {t[0]}: {' '.join(map(str, t[1:]))}" for t in derniers_tri])
            
            # Boules rejet√©es
            boules_rejetees = charger_boules_rejetees()
            info_rejet = f"üö´ Boules rejet√©es: {sorted(boules_rejetees)}\n\n" if boules_rejetees else ""
            
            message = (
                "üìä *Statistiques pour le Niger:*\n\n"
                f"‚Ä¢ Tirages analys√©s: *{total_tirages}*\n"
                f"‚Ä¢ Dernier tirage: *{derniere_maj}*\n\n"
                f"{info_rejet}"
                "üîù Num√©ros les plus fr√©quents:\n" +
                "\n".join([f"‚Ä¢ {num}: {count} fois" for num, count in top_5]) +
                "\n\nüìÖ Derniers tirages (du plus r√©cent):\n" + derniers
            )
            
            await reply(message, parse_mode='Markdown')
            
        except Exception as e:
            await reply(f"‚ùå Erreur de donn√©es: {str(e)}")
            
    except Exception as e:
        error_msg = f"‚ùå Erreur syst√®me: {str(e)}"
        if isinstance(query_or_update, Update):
            await query_or_update.message.reply_text(error_msg)
        else:
            await query_or_update.edit_message_text(error_msg)

async def send_temoignages(query_or_update, context: ContextTypes.DEFAULT_TYPE):
    """Affiche des t√©moignages de gagnants"""
    try:
        if isinstance(query_or_update, Update):
            reply = query_or_update.message.reply_text
        else:
            reply = query_or_update.edit_message_text
        
        temoignages = [
            "üéâ *Amadou, Niamey:* 'Gr√¢ce √† LotoBot, j'ai gagn√© 500 000 FCFA! Je n'en revenais pas!'",
            "üí∞ *Fatima, Zinder:* '3 gains en 2 mois seulement! Ce bot est magique.'",
            "üèÜ *Ibrahim, Maradi:* 'J'ai enfin pu ouvrir mon commerce avec mes gains. Merci LotoBot!'"
        ]
        
        message = "üèÜ *T√©moignages de nos gagnants:*\n\n" + "\n\n".join(temoignages)
        await reply(message, parse_mode='Markdown')
        
    except Exception as e:
        error_msg = f"‚ùå Erreur: {str(e)}"
        if isinstance(query_or_update, Update):
            await query_or_update.message.reply_text(error_msg)
        else:
            await query_or_update.edit_message_text(error_msg)

async def send_premium_offers(query_or_update, context: ContextTypes.DEFAULT_TYPE):
    """Affiche les offres premium"""
    try:
        keyboard = [
            [InlineKeyboardButton(plan['label'], callback_data=f'premium_{plan_id}')]
            for plan_id, plan in PREMIUM_PLANS.items()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            "üíé *LotoBot Premium - La cl√© de vos gains!*\n\n"
            "Avantages exclusifs:\n"
            "‚úÖ Pr√©dictions quotidiennes illimit√©es\n"
            "‚úÖ Conseils de paris strat√©giques\n"
            "‚úÖ Alertes SMS avant chaque tirage\n"
            "‚úÖ Statistiques avanc√©es exclusives\n"
            "‚úÖ Support personnel prioritaire\n\n"
            f"üÜì Essai gratuit de {FREE_TRIAL_DAYS} jours disponible! /start\n\n"
            "Choisissez votre formule:"
        )
        
        if isinstance(query_or_update, Update):
            await query_or_update.message.reply_text(
                message, 
                parse_mode='Markdown', 
                reply_markup=reply_markup
            )
        else:
            await query_or_update.edit_message_text(
                message, 
                parse_mode='Markdown', 
                reply_markup=reply_markup
            )
            
    except Exception as e:
        error_msg = f"‚ùå Erreur: {str(e)}"
        if isinstance(query_or_update, Update):
            await query_or_update.message.reply_text(error_msg)
        else:
            await query_or_update.edit_message_text(error_msg)

async def handle_premium_payment(query, context: ContextTypes.DEFAULT_TYPE):
    """G√®re le processus de paiement pour premium"""
    try:
        plan_id = query.data.split('_')[1]
        plan = PREMIUM_PLANS.get(plan_id)
        
        if not plan:
            await query.edit_message_text("‚ùå Offre invalide")
            return
        
        message = (
            f"üì≤ *Paiement pour {plan['label']}:*\n\n"
            f"1. **Orange Money:** Envoyez {plan['price']} FCFA au 93 00 00 00\n"
            f"2. **Moov Money:** Envoyez {plan['price']} FCFA au 96 00 00 00\n"
            f"3. **Flooz:** Envoyez {plan['price']} FCFA au 98 00 00 00\n\n"
            "Apr√®s paiement, envoyez-nous:\n"
            f"- Le code de transaction\n"
            f"- Votre ID: `{query.from_user.id}`\n\n"
            "Votre compte sera activ√© dans les 24h!"
        )
        
        await query.edit_message_text(message, parse_mode='Markdown')
        
    except Exception as e:
        await query.edit_message_text(f"‚ùå Erreur: {str(e)}")

async def send_help(query_or_update, context: ContextTypes.DEFAULT_TYPE):
    """Affiche l'aide et les contacts"""
    try:
        if isinstance(query_or_update, Update):
            reply = query_or_update.message.reply_text
        else:
            reply = query_or_update.edit_message_text
        
        message = (
            "‚ÑπÔ∏è *Aide & Support LotoBot Niger*\n\n"
            "Commandes disponibles:\n"
            "‚Ä¢ /start - Menu principal\n"
            "‚Ä¢ /predict - Pr√©diction de num√©ros\n"
            "‚Ä¢ /stats - Statistiques locales\n"
            "‚Ä¢ /premium - Devenir membre premium\n"
            "‚Ä¢ /temoignages - Voir nos gagnants\n"
            "‚Ä¢ /rejected - Voir les boules rejet√©es\n\n"
            f"üÜì *Essai gratuit:*\n"
            f"Profitez de {FREE_TRIAL_DAYS} jours d'essai gratuit avec toutes les fonctionnalit√©s premium!\n\n"
            "üìû Support technique:\n"
            "Telegram: @SupportLotoBotNiger\n"
            "T√©l: +227 93 000 000\n"
            "Email: support@lotobot.ne\n\n"
            "Heures d'ouverture: 8h-20h, 7j/7"
        )
        
        await reply(message, parse_mode='Markdown')
        
    except Exception as e:
        error_msg = f"‚ùå Erreur: {str(e)}"
        if isinstance(query_or_update, Update):
            await query_or_update.message.reply_text(error_msg)
        else:
            await query_or_update.edit_message_text(error_msg)

async def afficher_boules_rejetees(query_or_update, context: ContextTypes.DEFAULT_TYPE):
    """Affiche les boules rejet√©es charg√©es du fichier manuel"""
    try:
        if isinstance(query_or_update, Update):
            reply = query_or_update.message.reply_text
        else:
            reply = query_or_update.edit_message_text
        
        boules_rejetees = charger_boules_rejetees()
        
        if not boules_rejetees:
            message = "‚ÑπÔ∏è Aucune boule rejet√©e enregistr√©e pour le moment."
        else:
            message = (
                "üö´ *Boules rejet√©es (boost√©es dans les pr√©dictions):*\n\n"
                f"`{sorted(boules_rejetees)}`\n\n"
                f"Total: {len(boules_rejetees)} num√©ros\n\n"
                "_Ces num√©ros sont absents depuis longtemps et ont une probabilit√© accrue dans nos pr√©dictions._"
            )
        
        await reply(message, parse_mode='Markdown')
        
    except Exception as e:
        error_msg = f"‚ùå Erreur: {str(e)}"
        if isinstance(query_or_update, Update):
            await query_or_update.message.reply_text(error_msg)
        else:
            await query_or_update.edit_message_text(error_msg)

async def process_payment_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Traite les messages contenant des codes de paiement"""
    try:
        user_id = update.effective_user.id
        message_text = update.message.text.lower()
        
        # D√©tection de code de transaction
        if "trans" in message_text and any(word in message_text for word in ["om", "moov", "flooz"]):
            # Enregistrer la demande de validation
            with open(PENDING_PAYMENTS, 'a', newline='') as f:
                writer = csv.writer(f)
                writer.writerow([datetime.now().isoformat(), user_id, message_text])
            
            await update.message.reply_text(
                "‚úÖ Merci! Votre paiement est en cours de validation.\n"
                "Vous recevrez une confirmation sous 24h."
            )
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erreur de traitement: {str(e)}")

# ======================
# UTILITAIRES
# ======================
def compter_utilisations_gratuites(user_id):
    """Compte le nombre d'utilisations gratuites"""
    count = 0
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, 'r') as f:
            reader = csv.reader(f)
            next(reader, None)  # Ignorer l'en-t√™te
            for row in reader:
                if row and len(row) > 1 and row[1] == str(user_id):
                    count += 1
    return count

async def envoyer_offre_premium(chat_id, user_id, context: ContextTypes.DEFAULT_TYPE):
    """Propose l'offre premium quand la limite est atteinte"""
    # V√©rifier si l'utilisateur peut avoir un essai gratuit
    if not a_deja_utilise_essai(user_id):
        message = (
            "üÜì Vous avez utilis√© toutes vos pr√©dictions gratuites!\n\n"
            f"üíé Activez votre essai gratuit de {FREE_TRIAL_DAYS} jours pour:\n"
            "- Pr√©dictions ILLIMIT√âES\n"
            "- Alertes SMS exclusives\n"
            "- Conseils de paris strat√©giques\n\n"
            "üëâ /start pour activer votre essai"
        )
    else:
        message = (
            "üÜì Vous avez utilis√© toutes vos pr√©dictions gratuites!\n\n"
            "üíé Passez √† LotoBot Premium pour:\n"
            "- Pr√©dictions ILLIMIT√âES\n"
            "- Alertes SMS exclusives\n"
            "- Conseils de paris strat√©giques\n\n"
            "Offre sp√©ciale Niger: seulement 1000 FCFA/mois!\n"
            "üëâ /premium pour voir les offres"
        )
    
    await context.bot.send_message(chat_id=chat_id, text=message)

# ======================
# INITIALISATION
# ======================
print("‚öôÔ∏è Initialisation de LotoBot Niger...")
print(f"üìÅ R√©pertoire de travail: {os.getcwd()}")

# Cr√©er les fichiers s'ils n'existent pas
for file_path in [CSV_FILE, MODEL_FILE, HISTORY_FILE, PREMIUM_FILE, 
                 REJECTED_BALLS_FILE, ACTIVITY_LOG, PENDING_PAYMENTS]:
    if not os.path.exists(file_path):
        # Cr√©er les r√©pertoires parents si n√©cessaire
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        # Cr√©er le fichier avec l'en-t√™te appropri√©
        with open(file_path, 'w', newline='') as f:
            writer = csv.writer(f)
            if file_path == REJECTED_BALLS_FILE:
                writer.writerow(['date', 'tirages_analyses', 'boules_rejetees'])
                print(f"üìÅ Fichier cr√©√©: {file_path}")
            elif file_path == PREMIUM_FILE:
                writer.writerow(['user_id', 'expiry_date'])
                print(f"üìÅ Fichier cr√©√©: {file_path}")
            elif file_path == HISTORY_FILE:
                writer.writerow(['timestamp', 'user_id', 'prediction'])
                print(f"üìÅ Fichier cr√©√©: {file_path}")
            elif file_path == ACTIVITY_LOG:
                writer.writerow(['timestamp', 'user_id', 'action'])
                print(f"üìÅ Fichier cr√©√©: {file_path}")
            elif file_path == PENDING_PAYMENTS:
                writer.writerow(['timestamp', 'user_id', 'message'])
                print(f"üìÅ Fichier cr√©√©: {file_path}")
            else:
                # Pour les autres fichiers, on ne fait rien (ils seront cr√©√©s par l'usage)
                pass

# Chargement du mod√®le
models = None
try:
    # Essayer de charger un mod√®le existant
    if os.path.exists(MODEL_FILE):
        print("‚ö° Tentative de chargement du mod√®le depuis le cache...")
        models = joblib.load(MODEL_FILE)
        print("‚úÖ Mod√®le charg√© depuis le cache")
    
    # Si pas de mod√®le charg√©, essayer d'en entra√Æner un nouveau
    if models is None:
        print("üîÑ Aucun mod√®le trouv√©, entra√Ænement en cours...")
        models = entrainer_model()
        if models:
            joblib.dump(models, MODEL_FILE)
            print("‚úÖ Nouveau mod√®le entra√Æn√© et sauvegard√©")
        else:
            print("‚ö†Ô∏è Utilisation du mode al√©atoire (mod√®le non disponible)")
except Exception as e:
    print(f"‚ùå Erreur de chargement du mod√®le: {str(e)}")
    models = None

if __name__ == '__main__':
    # R√©cup√©rer le token depuis les variables d'environnement
    BOT_TOKEN = os.environ.get('BOT_TOKEN')
    if not BOT_TOKEN:
        print("‚ùå ERREUR: BOT_TOKEN non d√©fini dans les variables d'environnement")
        exit(1)
    
    # Initialiser le bot Telegram
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # Handlers principaux
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("predict", lambda u, c: send_prediction(u, c)))
    app.add_handler(CommandHandler("stats", lambda u, c: send_stats(u, c)))
    app.add_handler(CommandHandler("premium", lambda u, c: send_premium_offers(u, c)))
    app.add_handler(CommandHandler("temoignages", lambda u, c: send_temoignages(u, c)))
    app.add_handler(CommandHandler("help", lambda u, c: send_help(u, c)))
    app.add_handler(CommandHandler("rejected", lambda u, c: afficher_boules_rejetees(u, c)))
    
    # Handlers sp√©ciaux
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_payment_message))
    
    print("ü§ñ LotoBot Niger lanc√© - Pr√™t √† gagner!")
    print(f"üÜì P√©riode d'essai gratuit: {FREE_TRIAL_DAYS} jours")
    
    # Lancer le bot en mode polling
    app.run_polling()


# ======================
# PARTIE D√âMARRAGE POUR RENDER
# ======================


# Cr√©er une application Flask minimale
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "ü§ñ LotoBot Niger est actif et fonctionne! ‚úÖ"

@flask_app.route('/health')
def health_check():
    return "OK", 200

def run_flask_server():
    """Lance le serveur Flask dans un thread s√©par√©"""
    port = int(os.environ.get("PORT", 1000))
    flask_app.run(host='0.0.0.0', port=port, use_reloader=False)

if __name__ == '__main__':
    # D√©marrer le serveur Flask dans un thread s√©par√©
    flask_thread = threading.Thread(target=run_flask_server)
    flask_thread.daemon = True
    flask_thread.start()
    
    # D√©marrer le bot Telegram
    print("D√©marrage du bot Telegram...")
    application.run_polling()
